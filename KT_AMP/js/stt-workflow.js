/**
 * STT ÌÜµÌï© ÏõåÌÅ¨ÌîåÎ°úÏö∞ Í¥ÄÎ¶¨
 * ÌïôÏäµ, Î∞∞Ìè¨, Í≤ÄÏ¶ù, ÌÖåÏä§Ìä∏ ÌîÑÎ°úÏÑ∏Ïä§Î•º ÌïòÎÇòÏùò ÌôîÎ©¥ÏóêÏÑú Í¥ÄÎ¶¨
 */

class STTWorkflow {
  constructor() {
    this.currentStep = 1;
    this.totalSteps = 5;
    this.uploadedFiles = [];
    this.trainingStatus = 'ready';
    this.isTraining = false;
    this.trainingInterval = null;
    this.logEntries = [];
    
    this.stepTips = {
      1: 'ÌååÏùºÏùÑ ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú ÏâΩÍ≤å ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§. ÏùåÏÑ± ÌååÏùºÍ≥º Ï†ÑÏÇ¨ ÌÖçÏä§Ìä∏Î•º Ìï®Íªò ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî.',
      2: 'Í∏∞Î≥∏ Î™®Îç∏ ÏÑ†ÌÉùÏù¥ ÏÑ±Îä•Ïóê ÌÅ∞ ÏòÅÌñ•ÏùÑ Ï§çÎãàÎã§. Wav2Vec2Í∞Ä ÌïúÍµ≠Ïñ¥Ïóê ÏµúÏ†ÅÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§.',
      3: 'ÌïôÏäµ Ï§ëÏóêÎèÑ Îã§Î•∏ ÏûëÏóÖÏùÑ Ìï† Ïàò ÏûàÏäµÎãàÎã§. Î∏åÎùºÏö∞Ï†ÄÎ•º Îã´ÏïÑÎèÑ ÌïôÏäµÏùÄ Í≥ÑÏÜçÎê©ÎãàÎã§.',
      4: 'Îã§ÏñëÌïú ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Î°ú Î™®Îç∏ ÏÑ±Îä•ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî. WERÏù¥ 5% Ïù¥ÌïòÎ©¥ Ïö∞ÏàòÌïú ÏÑ±Îä•ÏûÖÎãàÎã§.',
      5: 'Ïä§ÌÖåÏù¥Ïßï ÌôòÍ≤ΩÏóêÏÑú Ï∂©Î∂ÑÌûà ÌÖåÏä§Ìä∏Ìïú ÌõÑ Ïö¥ÏòÅ ÌôòÍ≤ΩÏóê Î∞∞Ìè¨ÌïòÏÑ∏Ïöî.'
    };
    
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.updateStepperProgress();
    this.updateStepTip();
    this.updateQuickStats();
    this.initializeStep1();
  }

  setupEventListeners() {
    // Ïä§ÌÖù ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
    document.getElementById('nextStepBtn').addEventListener('click', () => {
      this.nextStep();
    });

    // ÌååÏùº ÏóÖÎ°úÎìú
    this.setupFileUpload();
    
    // Ïï°ÏÖò Î≤ÑÌäºÎì§
    this.setupActionButtons();
    
    // Îã®Í≥ÑÎ≥Ñ ÌäπÏ†ï Ïù¥Î≤§Ìä∏
    this.setupStepSpecificEvents();
  }

  setupFileUpload() {
    const uploadZone = document.getElementById('uploadZone');
    const fileInput = document.getElementById('fileInput');
    
    if (!uploadZone || !fileInput) return;

    // ÌÅ¥Î¶≠ ÏóÖÎ°úÎìú
    uploadZone.addEventListener('click', () => {
      fileInput.click();
    });

    // ÌååÏùº ÏÑ†ÌÉù
    fileInput.addEventListener('change', (e) => {
      this.handleFiles(e.target.files);
    });

    // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠
    uploadZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadZone.classList.add('dragover');
    });

    uploadZone.addEventListener('dragleave', (e) => {
      e.preventDefault();
      uploadZone.classList.remove('dragover');
    });

    uploadZone.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadZone.classList.remove('dragover');
      this.handleFiles(e.dataTransfer.files);
    });
  }

  setupActionButtons() {
    // ÏßÑÌñâÏÉÅÌô© Ï†ÄÏû•
    document.getElementById('saveProgress').addEventListener('click', () => {
      this.saveProgress();
    });

    // ÌÖúÌîåÎ¶ø Î°úÎìú
    document.getElementById('loadTemplate').addEventListener('click', () => {
      this.loadTemplate();
    });

    // ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞
    document.getElementById('exportConfig').addEventListener('click', () => {
      this.exportConfig();
    });
  }

  setupStepSpecificEvents() {
    // Step 3: ÌïôÏäµ Ï†úÏñ¥
    const pauseBtn = document.getElementById('pauseTraining');
    const stopBtn = document.getElementById('stopTraining');
    
    if (pauseBtn) {
      pauseBtn.addEventListener('click', () => {
        this.pauseTraining();
      });
    }
    
    if (stopBtn) {
      stopBtn.addEventListener('click', () => {
        this.stopTraining();
      });
    }

    // Îç∞Ïù¥ÌÑ∞ Î∂ÑÌï† ÎπÑÏú® ÏûêÎèô Í≥ÑÏÇ∞
    const ratioInputs = ['trainRatio', 'validRatio', 'testRatio'];
    ratioInputs.forEach(id => {
      const input = document.getElementById(id);
      if (input) {
        input.addEventListener('input', () => {
          this.updateRatios(id);
        });
      }
    });
  }

  handleFiles(files) {
    const fileList = document.getElementById('fileList');
    if (!fileList) return;

    Array.from(files).forEach(file => {
      if (this.isValidFile(file)) {
        this.uploadedFiles.push({
          id: Date.now() + Math.random(),
          file: file,
          name: file.name,
          size: file.size,
          type: file.type,
          status: 'uploading',
          progress: 0
        });
      }
    });

    this.renderFileList();
    this.updateQuickStats();
    this.simulateUpload();
  }

  isValidFile(file) {
    const validTypes = [
      'audio/wav', 'audio/mp3', 'audio/flac', 'audio/mpeg',
      'text/plain', 'application/json'
    ];
    const validExtensions = ['.wav', '.mp3', '.flac', '.txt', '.json'];
    
    const hasValidType = validTypes.some(type => file.type.includes(type));
    const hasValidExtension = validExtensions.some(ext => file.name.toLowerCase().endsWith(ext));
    
    if (!hasValidType && !hasValidExtension) {
      this.showNotification('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§: ' + file.name, 'error');
      return false;
    }
    
    if (file.size > 500 * 1024 * 1024) { // 500MB
      this.showNotification('ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§: ' + file.name, 'error');
      return false;
    }
    
    return true;
  }

  renderFileList() {
    const fileList = document.getElementById('fileList');
    if (!fileList) return;

    if (this.uploadedFiles.length === 0) {
      fileList.style.display = 'none';
      return;
    }

    fileList.style.display = 'block';
    fileList.innerHTML = this.uploadedFiles.map(file => `
      <div class="file-item ${file.status === 'completed' ? 'status-success' : file.status === 'error' ? 'status-error' : ''}">
        <div class="file-info">
          <div class="file-icon">${this.getFileIcon(file.type)}</div>
          <div class="file-details">
            <div class="file-name">${file.name}</div>
            <div class="file-meta">${this.formatFileSize(file.size)} ‚Ä¢ ${this.getFileStatus(file.status)}</div>
          </div>
        </div>
        <div class="file-status">
          <div class="file-progress">
            <div class="file-progress-bar" style="width: ${file.progress}%;"></div>
          </div>
        </div>
        <div class="file-actions">
          <button class="file-action-btn remove" onclick="sttWorkflow.removeFile('${file.id}')">
            üóëÔ∏è
          </button>
        </div>
      </div>
    `).join('');
  }

  getFileIcon(type) {
    if (type.includes('audio')) return 'üéµ';
    if (type.includes('text')) return 'üìù';
    return 'üìÑ';
  }

  getFileStatus(status) {
    const statusMap = {
      uploading: 'ÏóÖÎ°úÎìú Ï§ë...',
      completed: 'ÏôÑÎ£å',
      error: 'Ïò§Î•ò',
      processing: 'Ï≤òÎ¶¨ Ï§ë...'
    };
    return statusMap[status] || 'ÎåÄÍ∏∞';
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  simulateUpload() {
    this.uploadedFiles.forEach(file => {
      if (file.status === 'uploading') {
        const interval = setInterval(() => {
          file.progress += Math.random() * 20;
          if (file.progress >= 100) {
            file.progress = 100;
            file.status = 'completed';
            clearInterval(interval);
          }
          this.renderFileList();
          this.updateQuickStats();
        }, 200);
      }
    });
  }

  removeFile(fileId) {
    this.uploadedFiles = this.uploadedFiles.filter(file => file.id !== fileId);
    this.renderFileList();
    this.updateQuickStats();
  }

  nextStep() {
    if (this.currentStep < this.totalSteps) {
      // ÌòÑÏû¨ Îã®Í≥Ñ Í≤ÄÏ¶ù
      if (!this.validateCurrentStep()) {
        return;
      }

      // Ïù¥Ï†Ñ Îã®Í≥Ñ ÎπÑÌôúÏÑ±Ìôî
      document.getElementById(`step-${this.currentStep}`).classList.remove('active');
      document.querySelector(`.step-item[data-step="${this.currentStep}"]`).classList.remove('active');
      document.querySelector(`.step-item[data-step="${this.currentStep}"]`).classList.add('completed');

      // Îã§Ïùå Îã®Í≥Ñ ÌôúÏÑ±Ìôî
      this.currentStep++;
      document.getElementById(`step-${this.currentStep}`).classList.add('active');
      document.querySelector(`.step-item[data-step="${this.currentStep}"]`).classList.add('active');

      this.updateStepperProgress();
      this.updateStepTip();
      this.updateNextButton();
      
      // Îã®Í≥ÑÎ≥Ñ Ï¥àÍ∏∞Ìôî
      this.initializeCurrentStep();
    }
  }

  validateCurrentStep() {
    switch (this.currentStep) {
      case 1:
        if (this.uploadedFiles.length === 0) {
          this.showNotification('ÏµúÏÜå ÌïòÎÇò Ïù¥ÏÉÅÏùò ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
          return false;
        }
        const completedFiles = this.uploadedFiles.filter(f => f.status === 'completed');
        if (completedFiles.length === 0) {
          this.showNotification('ÌååÏùº ÏóÖÎ°úÎìúÍ∞Ä ÏôÑÎ£åÎê† ÎïåÍπåÏßÄ Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.', 'warning');
          return false;
        }
        break;
      case 2:
        // ÏÑ§Ï†ï Í≤ÄÏ¶ù Î°úÏßÅ
        break;
      case 3:
        if (this.trainingStatus !== 'completed') {
          this.showNotification('Î™®Îç∏ ÌïôÏäµÏù¥ ÏôÑÎ£åÎê† ÎïåÍπåÏßÄ Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.', 'warning');
          return false;
        }
        break;
      case 4:
        // Í≤ÄÏ¶ù ÏôÑÎ£å ÌôïÏù∏
        break;
    }
    return true;
  }

  initializeCurrentStep() {
    switch (this.currentStep) {
      case 2:
        this.initializeStep2();
        break;
      case 3:
        this.initializeStep3();
        break;
      case 4:
        this.initializeStep4();
        break;
      case 5:
        this.initializeStep5();
        break;
    }
  }

  initializeStep1() {
    // Ïù¥ÎØ∏ setupFileUploadÏóêÏÑú Ï≤òÎ¶¨Îê®
  }

  initializeStep2() {
    // Î™®Îç∏ ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
    this.updateEstimatedTime();
  }

  initializeStep3() {
    // ÌïôÏäµ ÏãúÏûë Í∞ÄÎä• ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
    const nextBtn = document.getElementById('nextStepBtn');
    if (nextBtn) {
      nextBtn.textContent = 'üöÄ ÌïôÏäµ ÏãúÏûë';
      nextBtn.onclick = () => this.startTraining();
    }
  }

  initializeStep4() {
    // Í≤ÄÏ¶ù Í≤∞Í≥º Î°úÎìú
    this.loadValidationResults();
    
    // ÌÖåÏä§Ìä∏ ÌååÏùº ÏóÖÎ°úÎìú ÏÑ§Ï†ï
    this.setupTestFileUpload();
  }

  initializeStep5() {
    // Î∞∞Ìè¨ Ï§ÄÎπÑ
    this.prepareDeplomynet();
  }

  startTraining() {
    if (this.isTraining) return;

    this.isTraining = true;
    this.trainingStatus = 'training';
    
    // UI ÏóÖÎç∞Ïù¥Ìä∏
    const nextBtn = document.getElementById('nextStepBtn');
    if (nextBtn) {
      nextBtn.textContent = '‚è∏Ô∏è ÌïôÏäµ Ï§ë...';
      nextBtn.disabled = true;
    }

    // ÌïôÏäµ ÏßÑÌñâ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    this.simulateTraining();
    
    this.showNotification('Î™®Îç∏ ÌïôÏäµÏùÑ ÏãúÏûëÌï©ÎãàÎã§.', 'info');
    this.addLog('ÌïôÏäµ ÏãúÏûë', 'info');
  }

  simulateTraining() {
    let currentEpoch = 0;
    const totalEpochs = parseInt(document.getElementById('epochs')?.value || 50);
    let trainLoss = 2.5;
    let validLoss = 2.3;
    let accuracy = 60;

    this.trainingInterval = setInterval(() => {
      currentEpoch++;
      
      // Î©îÌä∏Î¶≠ ÏóÖÎç∞Ïù¥Ìä∏ (ÏãúÎÆ¨Î†àÏù¥ÏÖò)
      trainLoss = Math.max(0.1, trainLoss - (Math.random() * 0.1));
      validLoss = Math.max(0.1, validLoss - (Math.random() * 0.08));
      accuracy = Math.min(95, accuracy + (Math.random() * 2));
      
      // UI ÏóÖÎç∞Ïù¥Ìä∏
      this.updateTrainingMetrics(currentEpoch, trainLoss, validLoss, accuracy);
      this.updateTrainingProgress(currentEpoch, totalEpochs);
      
      // Î°úÍ∑∏ Ï∂îÍ∞Ä
      if (currentEpoch % 5 === 0) {
        this.addLog(`Epoch ${currentEpoch}/${totalEpochs} - Loss: ${trainLoss.toFixed(3)}, Accuracy: ${accuracy.toFixed(1)}%`, 'info');
      }
      
      // ÌïôÏäµ ÏôÑÎ£å
      if (currentEpoch >= totalEpochs) {
        this.completeTraining();
      }
    }, 1000); // 1Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏ (Ïã§Ï†úÎ°úÎäî Ìõ®Ïî¨ ÎäêÎ¶º)
  }

  updateTrainingMetrics(epoch, trainLoss, validLoss, accuracy) {
    const elements = {
      currentEpoch: epoch,
      trainLoss: trainLoss.toFixed(3),
      validLoss: validLoss.toFixed(3),
      accuracy: accuracy.toFixed(1) + '%'
    };

    Object.entries(elements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    });
  }

  updateTrainingProgress(current, total) {
    const progress = (current / total) * 100;
    
    const progressBar = document.getElementById('overallProgress');
    const progressText = document.getElementById('progressText');
    
    if (progressBar) {
      progressBar.style.width = `${progress}%`;
    }
    
    if (progressText) {
      progressText.textContent = `${progress.toFixed(1)}%`;
    }
  }

  completeTraining() {
    if (this.trainingInterval) {
      clearInterval(this.trainingInterval);
      this.trainingInterval = null;
    }

    this.isTraining = false;
    this.trainingStatus = 'completed';
    
    // UI ÏóÖÎç∞Ïù¥Ìä∏
    const nextBtn = document.getElementById('nextStepBtn');
    if (nextBtn) {
      nextBtn.textContent = '‚û°Ô∏è Îã§Ïùå Îã®Í≥Ñ';
      nextBtn.disabled = false;
      nextBtn.onclick = () => this.nextStep();
    }

    this.addLog('ÌïôÏäµ ÏôÑÎ£å!', 'success');
    this.showNotification('Î™®Îç∏ ÌïôÏäµÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.', 'success');
    
    // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    document.getElementById('currentStatus').textContent = 'ÌïôÏäµÏôÑÎ£å';
  }

  pauseTraining() {
    if (this.trainingInterval) {
      clearInterval(this.trainingInterval);
      this.trainingInterval = null;
      this.addLog('ÌïôÏäµ ÏùºÏãúÏ†ïÏßÄ', 'warning');
      this.showNotification('ÌïôÏäµÏù¥ ÏùºÏãúÏ†ïÏßÄÎêòÏóàÏäµÎãàÎã§.', 'warning');
    }
  }

  stopTraining() {
    if (this.trainingInterval) {
      clearInterval(this.trainingInterval);
      this.trainingInterval = null;
    }
    
    this.isTraining = false;
    this.trainingStatus = 'stopped';
    
    this.addLog('ÌïôÏäµ Ï§ëÏßÄÎê®', 'error');
    this.showNotification('ÌïôÏäµÏù¥ Ï§ëÏßÄÎêòÏóàÏäµÎãàÎã§.', 'error');
    
    // UI Î¶¨ÏÖã
    const nextBtn = document.getElementById('nextStepBtn');
    if (nextBtn) {
      nextBtn.textContent = 'üöÄ ÌïôÏäµ Ïû¨ÏãúÏûë';
      nextBtn.disabled = false;
      nextBtn.onclick = () => this.startTraining();
    }
  }

  updateStepperProgress() {
    const progress = ((this.currentStep - 1) / (this.totalSteps - 1)) * 100;
    const progressBar = document.querySelector('.stepper-progress');
    
    if (progressBar) {
      progressBar.style.width = `${progress}%`;
    }
  }

  updateStepTip() {
    const tipElement = document.getElementById('stepTip');
    if (tipElement && this.stepTips[this.currentStep]) {
      tipElement.textContent = this.stepTips[this.currentStep];
    }
  }

  updateQuickStats() {
    const totalFiles = this.uploadedFiles.length;
    const totalSize = this.uploadedFiles.reduce((sum, file) => sum + file.size, 0);
    
    document.getElementById('totalFiles').textContent = totalFiles;
    document.getElementById('totalSize').textContent = this.formatFileSize(totalSize);
    
    this.updateEstimatedTime();
  }

  updateEstimatedTime() {
    const fileCount = this.uploadedFiles.length;
    const epochs = parseInt(document.getElementById('epochs')?.value || 50);
    
    // Í∞ÑÎã®Ìïú ÏãúÍ∞Ñ Ï∂îÏ†ï (Ïã§Ï†úÎ°úÎäî Îçî Î≥µÏû°Ìïú Í≥ÑÏÇ∞ ÌïÑÏöî)
    const estimatedMinutes = Math.max(30, fileCount * 5 + epochs * 2);
    const hours = Math.floor(estimatedMinutes / 60);
    const minutes = estimatedMinutes % 60;
    
    const timeText = hours > 0 ? `${hours}ÏãúÍ∞Ñ ${minutes}Î∂Ñ` : `${minutes}Î∂Ñ`;
    document.getElementById('estimatedTime').textContent = timeText;
  }

  updateNextButton() {
    const nextBtn = document.getElementById('nextStepBtn');
    if (!nextBtn) return;

    if (this.currentStep === this.totalSteps) {
      nextBtn.textContent = 'üöÄ Î∞∞Ìè¨ÌïòÍ∏∞';
    } else {
      nextBtn.textContent = '‚û°Ô∏è Îã§Ïùå Îã®Í≥Ñ';
    }
  }

  updateRatios(changedId) {
    const trainRatio = document.getElementById('trainRatio');
    const validRatio = document.getElementById('validRatio');
    const testRatio = document.getElementById('testRatio');
    
    if (!trainRatio || !validRatio || !testRatio) return;

    const values = {
      train: parseInt(trainRatio.value),
      valid: parseInt(validRatio.value),
      test: parseInt(testRatio.value)
    };

    // 100%Î•º Ï¥àÍ≥ºÌïòÏßÄ ÏïäÎèÑÎ°ù Ï°∞Ï†ï
    const total = values.train + values.valid + values.test;
    if (total > 100) {
      if (changedId === 'trainRatio') {
        values.train = 100 - values.valid - values.test;
        trainRatio.value = values.train;
      } else if (changedId === 'validRatio') {
        values.valid = 100 - values.train - values.test;
        validRatio.value = values.valid;
      } else if (changedId === 'testRatio') {
        values.test = 100 - values.train - values.valid;
        testRatio.value = values.test;
      }
    }
  }

  loadValidationResults() {
    // Í≤ÄÏ¶ù Í≤∞Í≥º ÏãúÎÆ¨Î†àÏù¥ÏÖò
    setTimeout(() => {
      this.showNotification('Î™®Îç∏ Í≤ÄÏ¶ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.', 'success');
    }, 1000);
  }

  setupTestFileUpload() {
    const testUploadZone = document.getElementById('testUploadZone');
    if (!testUploadZone) return;

    testUploadZone.addEventListener('click', () => {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.wav,.mp3,.flac';
      input.onchange = (e) => {
        this.handleTestFile(e.target.files[0]);
      };
      input.click();
    });
  }

  handleTestFile(file) {
    if (!file) return;

    const resultsElement = document.getElementById('testResults');
    if (!resultsElement) return;

    resultsElement.textContent = 'ÏùåÏÑ± ÌååÏùºÏùÑ Î∂ÑÏÑù Ï§ë...';
    
    // ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏãúÎÆ¨Î†àÏù¥ÏÖò
    setTimeout(() => {
      const sampleResults = [
        'ÏïàÎÖïÌïòÏÑ∏Ïöî. Ïò§Îäò ÎÇ†Ïî®Í∞Ä Ï†ïÎßê Ï¢ãÏäµÎãàÎã§.',
        'ÏùåÏÑ± Ïù∏Ïãù ÌÖåÏä§Ìä∏Î•º ÏßÑÌñâÌïòÍ≥† ÏûàÏäµÎãàÎã§.',
        'Î™®Îç∏Ïùò ÏÑ±Îä•Ïù¥ ÏòàÏÉÅÎ≥¥Îã§ Ïö∞ÏàòÌï©ÎãàÎã§.'
      ];
      
      const randomResult = sampleResults[Math.floor(Math.random() * sampleResults.length)];
      resultsElement.textContent = `Ïù∏Ïãù Í≤∞Í≥º: "${randomResult}"\n\nÏã†Î¢∞ÎèÑ: 94.2%\nÏ≤òÎ¶¨ ÏãúÍ∞Ñ: 1.8Ï¥à`;
    }, 2000);
  }

  prepareDeplomynet() {
    // Î∞∞Ìè¨ Ï§ÄÎπÑ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    setTimeout(() => {
      this.showNotification('Î∞∞Ìè¨ ÌôòÍ≤ΩÏù¥ Ï§ÄÎπÑÎêòÏóàÏäµÎãàÎã§.', 'success');
    }, 1000);
  }

  addLog(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString('ko-KR');
    const logEntry = {
      timestamp,
      message,
      type
    };
    
    this.logEntries.push(logEntry);
    
    const logsContainer = document.getElementById('trainingLogs');
    if (logsContainer) {
      const logElement = document.createElement('div');
      logElement.className = `log-entry ${type}`;
      logElement.innerHTML = `
        <span class="log-timestamp">[${timestamp}]</span>
        <span>${message}</span>
      `;
      logsContainer.appendChild(logElement);
      logsContainer.scrollTop = logsContainer.scrollHeight;
    }
  }

  saveProgress() {
    const progressData = {
      currentStep: this.currentStep,
      uploadedFiles: this.uploadedFiles,
      trainingStatus: this.trainingStatus,
      timestamp: new Date().toISOString()
    };
    
    localStorage.setItem('stt-workflow-progress', JSON.stringify(progressData));
    this.showNotification('ÏßÑÌñâÏÉÅÌô©Ïù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.', 'success');
  }

  loadTemplate() {
    // ÌÖúÌîåÎ¶ø Î°úÎìú Í∏∞Îä•
    this.showNotification('ÌÖúÌîåÎ¶ø Í∏∞Îä•ÏùÄ Í≥ß Ï∂îÍ∞ÄÎê† ÏòàÏ†ïÏûÖÎãàÎã§.', 'info');
  }

  exportConfig() {
    const config = {
      modelSettings: {
        baseModel: document.getElementById('baseModel')?.value,
        learningRate: document.getElementById('learningRate')?.value,
        batchSize: document.getElementById('batchSize')?.value,
        epochs: document.getElementById('epochs')?.value
      },
      dataSettings: {
        sampleRate: document.getElementById('sampleRate')?.value,
        trainRatio: document.getElementById('trainRatio')?.value,
        validRatio: document.getElementById('validRatio')?.value,
        testRatio: document.getElementById('testRatio')?.value
      },
      exportTime: new Date().toISOString()
    };
    
    const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'stt-workflow-config.json';
    a.click();
    URL.revokeObjectURL(url);
    
    this.showNotification('ÏÑ§Ï†ïÏù¥ ÎÇ¥Î≥¥ÎÇ¥Ï°åÏäµÎãàÎã§.', 'success');
  }

  showNotification(message, type = 'info') {
    if (window.ktampComponents) {
      window.ktampComponents.showNotification(message, type, 4000);
    } else {
      console.log(`${type.toUpperCase()}: ${message}`);
    }
  }
}

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
window.sttWorkflow = null;

// Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', () => {
  window.sttWorkflow = new STTWorkflow();
});

export default STTWorkflow;






